return {}
-- local M = {
--   "mfussenegger/nvim-dap",
--
--   dependencies = {
--     {
--       "mfussenegger/nvim-dap-python",
--       config = function()
--         require("dap-python").setup("~/.pyenv/versions/debugpy/bin/python")
--       end,
--     },
--     { "jbyuki/one-small-step-for-vimkind" },
--   },
-- }
--
-- function M.config()
--   local Config = require("lazyvim.config")
--   vim.api.nvim_set_hl(0, "DapStoppedLine", { default = true, link = "Visual" })
--
--   for name, sign in pairs(Config.icons.dap) do
--     sign = type(sign) == "table" and sign or { sign }
--     vim.fn.sign_define(
--       "Dap" .. name,
--       { text = sign[1], texthl = sign[2] or "DiagnosticInfo", linehl = sign[3], numhl = sign[3] }
--     )
--   end
--
--   local dap = require("dap")
--
--   dap.configurations.lua = {
--     {
--       type = "nlua",
--       request = "attach",
--       name = "Attach to running Neovim instance",
--     },
--   }
--
--   dap.adapters.nlua = function(callback, config)
--     callback({ type = "server", host = config.host or "127.0.0.1", port = config.port or 8086 })
--   end
--
--   local dapui = require("dapui")
--   dap.listeners.after.event_initialized["dapui_config"] = function()
--     dapui.open({})
--   end
--   dap.listeners.before.event_terminated["dapui_config"] = function()
--     dapui.close({})
--   end
--   dap.listeners.before.event_exited["dapui_config"] = function()
--     dapui.close({})
--   end
--
--   table.insert(dap.configurations.python, {
--     type = "python",
--     request = "launch",
--     name = "Django",
--     program = vim.fn.getcwd() .. "/manage.py", -- NOTE: Adapt path to manage.py as needed
--     args = { "runserver", "--noreload" },
--   })
-- end
--
-- return M
