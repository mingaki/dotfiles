#!/bin/bash

set -e

echo "üöÄ Installing packages for {{ .os }}/{{ .arch }}..."

{{- if .isMacOS }}

# macOS package installation
echo "üì¶ Installing Homebrew packages..."

# CLI tools that complement Nix
brew_packages=(
    "j178/tap/leetgo"
    "mise"
    "php"
    "neovim"
)

# GUI applications
brew_casks=(
    # Development
    "docker"
    
    # Productivity
    "1password"
    "1password-cli"
    "google-drive"
    "obsidian"
    "quarto"
    "typora"
    
    # Media
    "iina"
    "spotify"
    "cleanshot"
    
    # Communication
    "slack"
    "wechat"
    "zoom"
    
    # Learning
    "anki"
    "eudic"
    
    # macOS system tools
    "alfred"
    "aerospace"
    "karabiner-elements"
    "spacelauncher"
    "doll"
    "itsycal"
    "jordanbaird-ice"
    "stats"
    "mos"
    
    # Fonts
    "font-cascadia-code"
    "font-fira-code"
    "font-sf-mono"
    "font-sf-pro"
    "font-symbols-only-nerd-font"
    "sf-symbols"
    
    # Network/Security
    "clashx"
    "cyberduck"
)

# Check if Homebrew is installed
if ! command -v brew >/dev/null 2>&1; then
    echo "‚ùå Homebrew not found. Please install it first:"
    echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    exit 1
fi

# Install Homebrew packages
echo "üç∫ Installing Homebrew CLI packages..."
for package in "${brew_packages[@]}"; do
    if ! brew list "$package" >/dev/null 2>&1; then
        echo "  Installing $package..."
        brew install "$package"
    else
        echo "  ‚úì $package already installed"
    fi
done

# Install Homebrew casks
echo "üç∫ Installing Homebrew casks..."
for cask in "${brew_casks[@]}"; do
    if ! brew list --cask "$cask" >/dev/null 2>&1; then
        echo "  Installing $cask..."
        brew install --cask "$cask"
    else
        echo "  ‚úì $cask already installed"
    fi
done

# Tap additional repositories if needed
brew tap homebrew/cask-fonts 2>/dev/null || true

{{- else if .isLinux }}

# Linux package installation
echo "üì¶ Installing Linux packages..."

# Detect package manager
if command -v apt >/dev/null 2>&1; then
    PKG_MANAGER="apt"
    INSTALL_CMD="apt install -y"
    UPDATE_CMD="apt update"
elif command -v dnf >/dev/null 2>&1; then
    PKG_MANAGER="dnf"
    INSTALL_CMD="dnf install -y" 
    UPDATE_CMD="dnf check-update"
elif command -v pacman >/dev/null 2>&1; then
    PKG_MANAGER="pacman"
    INSTALL_CMD="pacman -S --noconfirm"
    UPDATE_CMD="pacman -Sy"
else
    echo "‚ùå No supported package manager found (apt/dnf/pacman)"
    exit 1
fi

echo "üì¶ Using $PKG_MANAGER package manager..."

# Update package lists
sudo $UPDATE_CMD

# Linux-specific CLI tools
linux_packages=(
    "neovim"
    "git"
    "curl"
    "wget"
    "unzip"
)

# Install packages
for package in "${linux_packages[@]}"; do
    echo "  Installing $package..."
    sudo $INSTALL_CMD "$package"
done

# Install mise (universal version manager)
if ! command -v mise >/dev/null 2>&1; then
    echo "üîß Installing mise..."
    curl https://mise.run | sh
fi

{{- end }}

# Install Nix CLI environment
echo "‚ùÑÔ∏è  Installing Nix packages..."
if command -v nix >/dev/null 2>&1; then
    cd {{ .chezmoi.sourceDir }}/nix
    nix develop --command echo "‚úì Nix environment ready"
else
    echo "‚ö†Ô∏è  Nix not found. Install it with:"
    echo "   curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install"
fi

echo "‚úÖ Package installation complete!"